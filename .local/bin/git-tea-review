#!/usr/bin/env bash
set -euo pipefail

# ----------------------------
# Configuration & Dependencies
# ----------------------------
for dep in tea jq; do
    if ! command -v "$dep" &>/dev/null; then
        echo "❌ Missing dependency: $dep"
        exit 1
    fi
done

# Read style from git config (default: emoji)
STYLE=$(git config --get tea-review.style || echo "plain")
STYLE=${STYLE,,}  # lowercase

# ----------------------------
# Logging helpers
# ----------------------------
ok() { if [[ "$STYLE" == "plain" ]]; then echo -e "[OK]\t$*"; else echo -e "✅\t$*"; fi }
err() { if [[ "$STYLE" == "plain" ]]; then echo -e "[ERROR]\t$*"; else echo -e "❌\t$*"; fi }
info() { if [[ "$STYLE" == "plain" ]]; then echo -e "[INFO]\t$*"; else echo -e "ℹ️\t$*"; fi }
warn() { if [[ "$STYLE" == "plain" ]]; then echo -e "[WARN]\t$*"; else echo -e "⚠️\t$*"; fi }
arrow() { if [[ "$STYLE" == "plain" ]]; then echo -e "[>>]\t$*"; else echo -e "👉\t$*"; fi }

# ----------------------------
# Menu helper
# ----------------------------
choose_from_menu() {
    local -r prompt="$1" outvar="$2" options=("${@:3}")
    local cur=0 count=${#options[@]} index=0
    local esc=$(echo -en "\e")
    printf "$prompt\n"
    while true; do
        index=0
        for o in "${options[@]}"; do
            if [ "$index" == "$cur" ]; then
                echo -e " >\e[7m$o\e[0m"
            else
                echo "  $o"
            fi
            (( ++index ))
        done
        read -s -n3 key
        if [[ $key == $esc[A ]]; then (( cur-- )); (( cur < 0 )) && (( cur = 0 ))
        elif [[ $key == $esc[B ]]; then (( ++cur )); (( cur >= count )) && (( cur = count - 1 ))
        elif [[ $key == "" ]]; then break
        fi
        echo -en "\e[${count}A"
    done
    printf -v $outvar "${options[$cur]}"
}

# ----------------------------
# Branch setup
# ----------------------------
main_branch=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@')
main_branch=${main_branch:-master}
current_branch=$(git rev-parse --abbrev-ref HEAD)

if [[ "$current_branch" == "$main_branch" ]]; then
    ts=$(date +%Y%m%d%H%M%S)
    branch_name="change/${ts}"
    info "On main branch, creating new branch: $branch_name"

    git stash push -u -m "auto-stash-before-branch-switch" >/dev/null || true
    git checkout -b "$branch_name"
    ok "Created branch $branch_name with current commits."

    info "Resetting main to origin/$main_branch..."
    git checkout "$main_branch"
    git fetch origin "$main_branch" --quiet
    git reset --hard "origin/$main_branch"
    ok "Main branch cleaned and synced with remote."

    git checkout "$branch_name"
    if git stash list | grep -q "auto-stash-before-branch-switch"; then
        git stash pop >/dev/null || warn "Could not apply stashed changes cleanly."
    fi
elif [[ "$current_branch" =~ ^change/ ]]; then
    info "Already on a change branch: $current_branch"
    branch_name=$current_branch
else
    warn "On a non-standard branch: $current_branch (no auto-create)."
fi

# ----------------------------
# Push branch
# ----------------------------
info "Pushing branch $branch_name..."
if ! git push -u origin "$branch_name" --force-with-lease --quiet; then
    err "Push failed — check your connection or permissions."
    exit 1
fi

# ----------------------------
# Check for existing PR
# ----------------------------
current_branch=$(git rev-parse --abbrev-ref HEAD)
existing_pr=$(tea pulls list -f index,title,head --state open --output json \
  | jq -r --arg head "$current_branch" '.[] | select(.head == $head) | .title' | head -n1)

if [[ -n "$existing_pr" && "$existing_pr" != "null" ]]; then
    ok "Pull request already exists for branch '$current_branch':"
    arrow "$existing_pr"
    exit 0
fi

# ----------------------------
# Ask PR type & description
# ----------------------------
types=(feat fix chore docs ci test)
choose_from_menu "Select PR type:" type "${types[@]}"

while true; do
    read -rp "Enter short description (max 20 chars, lowercase, dash-separated): " desc
    if [[ "$desc" =~ ^[a-z0-9-]{1,20}$ ]]; then break
    else err "Invalid description. Use lowercase letters, numbers, and dashes only (max 20 chars)."
    fi
done

pr_title="${type}/${desc}"
info "PR Title: $pr_title"

# ----------------------------
# Edit PR description
# ----------------------------
tmpfile=$(mktemp /tmp/git-tea-review.XXXXXX)
{
    echo "# Edit the pull request description below."
    echo "# Lines starting with '#' will be ignored."
    echo
    git log -1 --pretty=%s
    echo
    git log -1 --pretty=%b
} > "$tmpfile"

${EDITOR:-vi} "$tmpfile"

description=$(grep -v '^#' "$tmpfile" | sed '/^[[:space:]]*$/d')
rm -f "$tmpfile"

if [[ -z "$description" ]]; then
    err "PR creation aborted: empty description."
    exit 1
fi

# ----------------------------
# Create PR
# ----------------------------
tea pulls create \
  --title "$pr_title" \
  --description "$description" \
  --base "$main_branch" \
  --head "$(git rev-parse --abbrev-ref HEAD)"

ok "Pull request created successfully."
